@import 'rem';

// Media query breakpoints.
$breakpoints: (
  small: 0,
  medium: 768px,
  large: 992px,
  xlarge: 1200px,
  xxlarge: 1440px,
) !default;

/// The largest named breakpoint in which to include print as a media type
$print-breakpoint: large !default;

$zero-breakpoint: small !default;

$breakpoints-keys: map-to-list($breakpoints, 'keys');

@if nth(map-values($breakpoints), 1) != 0 {
  @error 'The first key in the $breakpoints map must have a value of `0`.';
} @else {
  $zero-breakpoint: nth(map-keys($breakpoints), 1);
}

/// Generates a media query string matching the input value.
/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.
@function breakpoint($val: $zero-breakpoint) {
  // Size or keyword
  $bp: nth($val, 1);
  // Value for max-width media queries
  $bp-max: 0;
  // Direction of media query (up, down, or only)
  $dir: if(length($val) > 1, nth($val, 2), up);
  // Eventual output
  $str: '';
  // Is it a named media query?
  $named: false;

  // Orientation media queries have a unique syntax
  @if $bp == 'landscape' or $bp == 'portrait' {
    @return '(orientation: #{$bp})';
  } @else if $bp == 'retina' {
    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';
  }

  // Try to pull a named breakpoint out of the $breakpoints map
  @if type-of($bp) == 'string' {
    @if map-has-key($breakpoints, $bp) {
      @if $dir == 'only' or $dir == 'down' {
        $bp-max: map-next($breakpoints, $bp);
      }
      $bp: map-get($breakpoints, $bp);
      $named: true;
    } @else {
      $bp: 0;
      @warn 'breakpoint(): `#{$val}` is not defined in your $breakpoints variable.';
    }
  }

  // Convert any pixel, rem, or unitless value to em
  $bp: rem($bp);

  // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).
  // Use a precision under 1px to support browser zoom, but not too low to avoid rounding.
  // See https://github.com/zurb/foundation-sites/issues/11313
  @if $bp-max {
    $bp-max: rem($bp-max) - 0.00125;
  }

  // Conditions to skip media query creation
  // - It's a named breakpoint that resolved to "0 down" or "0 up"
  // - It's a numeric breakpoint that resolved to "0 " + anything
  @if $bp > 0 or $dir == 'only' or $dir == 'down' {
    // `only` ranges use the format `(min-width: n) and (max-width: n)`
    @if $dir == 'only' {
      // Only named media queries can have an "only" range
      @if $named == true {
        // Only use "min-width" if the floor is greater than 0
        @if $bp > 0 {
          $str: $str + '( min-width: #{$bp} )';
          // Only add "and" to the media query if there's a ceiling
          @if $bp-max != null {
            $str: $str + ' and ';
          }
        }
        // Only use "max-width" if there's a ceiling
        @if $bp-max != null {
          $str: $str + '( max-width: #{$bp-max} )';
        }
      } @else {
        @warn 'breakpoint(): Only named media queries can have an `only` range.';
      }
    } @else if $dir == 'down' {
      // `down` ranges use the format `(max-width: n)`

      $max: if($named, $bp-max, $bp);
      // Skip media query creation if input value is exactly "0 down",
      // unless the function was called as "small down", in which case it's just "small only"
      @if $named or $bp > 0em {
        @if $max != null {
          $str: $str + '( max-width: #{$max} )';
        }
      }
    } @else if $bp > 0 {
      // `up` ranges use the format `(min-width: n)`

      $str: $str + '( min-width: #{$bp} )';
    }
  }
  @return $str;
}

/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:
///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.
///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.
///  - If a rem value is passed, the unit will be changed to em.
///  - If an em value is passed, the value will be used as-is.
///
/// If multiple values are passed, the mixin will generate a media query for each of them as described above.
/// Since the content is duplicated for each breakpoint, this mixin should only be used with properties that
/// change across breakpoints.
///
/// @param {Keyword|Number} $values... - Breakpoint name or px/rem/em value to process.
///
/// @output If the breakpoint is "0px and larger", outputs the content as-is.
///         Otherwise, outputs the content wrapped in a media query.
@mixin breakpoint($values...) {
  @for $i from 1 through length($values) {
    $value: nth($values, $i);
    $str: breakpoint($value);
    $bp: index($breakpoints-keys, $value);
    $pbp: index($breakpoints-keys, $print-breakpoint);

    $old-size: null;

    // Make breakpoint size available as a variable
    @if global-variable-exists(cur-size) {
      $old-size: $cur-size;
    }
    $cur-size: nth(
      $value,
      1
    ) !global; // get the first value to account for `only` and `down` keywords

    // If $str is still an empty string, no media query is needed
    @if $str == '' {
      @content;
    } @else {
      // For named breakpoints less than or equal to $print-breakpoint, add print to the media types
      @if $bp != null and $bp <= $pbp {
        @media print, screen and #{$str} {
          @content;
        }
      } @else {
        @media screen and #{$str} {
          @content;
        }
      }
    }

    $cur-size: $old-size !global;
  }
}

$small-up: '';
$small-only: '';

@if map-has-key($breakpoints, small) {
  $small-up: screen;
  $small-only: unquote('screen and #{breakpoint(small only)}');
}

$medium-up: '';
$medium-only: '';

@if map-has-key($breakpoints, medium) {
  $medium-up: unquote('screen and #{breakpoint(medium)}');
  $medium-only: unquote('screen and #{breakpoint(medium only)}');
}

$large-up: '';
$large-only: '';

@if map-has-key($breakpoints, large) {
  $large-up: unquote('screen and #{breakpoint(large)}');
  $large-only: unquote('screen and #{breakpoint(large only)}');
}

$xlarge-up: '';
$xlarge-only: '';

@if map-has-key($breakpoints, xlarge) {
  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');
  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');
}

$xxlarge-up: '';

@if map-has-key($breakpoints, xxlarge) {
  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');
}
/// The largest named breakpoint in which to include print as a media type
$print-breakpoint: large !default;

$zero-breakpoint: small !default;

$breakpoints-keys: map-to-list($breakpoints, 'keys');

@if nth(map-values($breakpoints), 1) != 0 {
  @error 'The first key in the $breakpoints map must have a value of `0`.';
} @else {
  $zero-breakpoint: nth(map-keys($breakpoints), 1);
}

/// Generates a media query string matching the input value.
/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.
@function breakpoint($val: $zero-breakpoint) {
  // Size or keyword
  $bp: nth($val, 1);
  // Value for max-width media queries
  $bp-max: 0;
  // Direction of media query (up, down, or only)
  $dir: if(length($val) > 1, nth($val, 2), up);
  // Eventual output
  $str: '';
  // Is it a named media query?
  $named: false;

  // Orientation media queries have a unique syntax
  @if $bp == 'landscape' or $bp == 'portrait' {
    @return '(orientation: #{$bp})';
  } @else if $bp == 'retina' {
    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';
  }

  // Try to pull a named breakpoint out of the $breakpoints map
  @if type-of($bp) == 'string' {
    @if map-has-key($breakpoints, $bp) {
      @if $dir == 'only' or $dir == 'down' {
        $bp-max: map-next($breakpoints, $bp);
      }
      $bp: map-get($breakpoints, $bp);
      $named: true;
    } @else {
      $bp: 0;
      @warn 'breakpoint(): `#{$val}` is not defined in your $breakpoints variable.';
    }
  }

  // Convert any pixel, rem, or unitless value to em
  $bp: rem($bp);

  // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).
  // Use a precision under 1px to support browser zoom, but not too low to avoid rounding.
  // See https://github.com/zurb/foundation-sites/issues/11313
  @if $bp-max {
    $bp-max: rem($bp-max) - 0.00125;
  }

  // Conditions to skip media query creation
  // - It's a named breakpoint that resolved to "0 down" or "0 up"
  // - It's a numeric breakpoint that resolved to "0 " + anything
  @if $bp > 0 or $dir == 'only' or $dir == 'down' {
    // `only` ranges use the format `(min-width: n) and (max-width: n)`
    @if $dir == 'only' {
      // Only named media queries can have an "only" range
      @if $named == true {
        // Only use "min-width" if the floor is greater than 0
        @if $bp > 0 {
          $str: $str + '( min-width: #{$bp} )';
          // Only add "and" to the media query if there's a ceiling
          @if $bp-max != null {
            $str: $str + ' and ';
          }
        }
        // Only use "max-width" if there's a ceiling
        @if $bp-max != null {
          $str: $str + '( max-width: #{$bp-max} )';
        }
      } @else {
        @warn 'breakpoint(): Only named media queries can have an `only` range.';
      }
    } @else if $dir == 'down' {
      // `down` ranges use the format `(max-width: n)`

      $max: if($named, $bp-max, $bp);
      // Skip media query creation if input value is exactly "0 down",
      // unless the function was called as "small down", in which case it's just "small only"
      @if $named or $bp > 0em {
        @if $max != null {
          $str: $str + '( max-width: #{$max} )';
        }
      }
    } @else if $bp > 0 {
      // `up` ranges use the format `(min-width: n)`

      $str: $str + '( min-width: #{$bp} )';
    }
  }
  @return $str;
}

/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:
///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.
///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.
///  - If a rem value is passed, the unit will be changed to em.
///  - If an em value is passed, the value will be used as-is.
///
/// If multiple values are passed, the mixin will generate a media query for each of them as described above.
/// Since the content is duplicated for each breakpoint, this mixin should only be used with properties that
/// change across breakpoints.
///
/// @param {Keyword|Number} $values... - Breakpoint name or px/rem/em value to process.
///
/// @output If the breakpoint is "0px and larger", outputs the content as-is.
///         Otherwise, outputs the content wrapped in a media query.
@mixin breakpoint($values...) {
  @for $i from 1 through length($values) {
    $value: nth($values, $i);
    $str: breakpoint($value);
    $bp: index($breakpoints-keys, $value);
    $pbp: index($breakpoints-keys, $print-breakpoint);

    $old-size: null;

    // Make breakpoint size available as a variable
    @if global-variable-exists(cur-size) {
      $old-size: $cur-size;
    }
    $cur-size: nth(
      $value,
      1
    ) !global; // get the first value to account for `only` and `down` keywords

    // If $str is still an empty string, no media query is needed
    @if $str == '' {
      @content;
    } @else {
      // For named breakpoints less than or equal to $print-breakpoint, add print to the media types
      @if $bp != null and $bp <= $pbp {
        @media print, screen and #{ $str } {
          @content;
        }
      } @else {
        @media screen and #{ $str } {
          @content;
        }
      }
    }

    $cur-size: $old-size !global;
  }
}

$small-up: '';
$small-only: '';

@if map-has-key($breakpoints, small) {
  $small-up: screen;
  $small-only: unquote('screen and #{ breakpoint( small only ) }');
}

$medium-up: '';
$medium-only: '';

@if map-has-key($breakpoints, medium) {
  $medium-up: unquote('screen and #{ breakpoint( medium ) }');
  $medium-only: unquote('screen and #{ breakpoint( medium only ) }');
}

$large-up: '';
$large-only: '';

@if map-has-key($breakpoints, large) {
  $large-up: unquote('screen and #{ breakpoint( large ) }');
  $large-only: unquote('screen and #{ breakpoint( large only ) }');
}

$xlarge-up: '';
$xlarge-only: '';

@if map-has-key($breakpoints, xlarge) {
  $xlarge-up: unquote('screen and #{ breakpoint( xlarge ) }');
  $xlarge-only: unquote('screen and #{ breakpoint( xlarge only ) }');
}

$xxlarge-up: '';

@if map-has-key($breakpoints, xxlarge) {
  $xxlarge-up: unquote('screen and #{ breakpoint( xxlarge ) }');
}
